name: Deploy

on:
  push:
    branches:
      - master

jobs:
  deploy:
    name: "Deploy Website"
    runs-on: windows-latest
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v2.4.0

      - name: "download website artifact"
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: CI-PR.yml
          workflow_conclusion: success
          name: website
          path: ./website/

      - name: "Get Public IP"
        id: ip
        uses: haythem/public-ip@v1.2

      - name: "Login to Azure"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CRED }}
          enable-AzPSSession: true

      - name: "Add public IP to allowed IPs"
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $publicIp = (Get-AzPublicIpAddress | Where-Object {$_.IpAddress -eq ${{ secrets.HOST }} })
            Write-Host "Public IP: $publicIp"
            $nic = Get-AzNetworkInterface | Where-Object { $_.IpConfigurations.PublicIpAddress.Id -eq $publicIp.Id }
            Write-Host "Network Interface:"
            Write-Host $nic
            $nsg = Get-AzResource -ResourceId $nic.NetworkSecurityGroup.Id | Get-AzNetworkSecurityGroup
            Write-Host "Network Security Group"
            Write-Host $nsg

            $ruleExists = (Get-AzNetworkSecurityRuleConfig -NetworkSecurityGroup $nsg).Name.Contains("github")

            if ($ruleExists) {
                Set-AzNetworkSecurityRuleConfig -Name "github" -Description "github" -Access Allow -Protocol TCP -Direction Inbound -Priority 1 -SourceAddressPrefix ${{ steps.ip.outputs.ipv4 }} -SourcePortRange * -DestinationAddressPrefix * -DestinationPortRange 22 -NetworkSecurityGroup $nsg
            }
            else {
                $nsg | Add-AzNetworkSecurityRuleConfig -Name "github" -Description "github" -Access Allow -Protocol TCP -Direction Inbound -Priority 1 -SourceAddressPrefix ${{ steps.ip.outputs.ipv4 }} -SourcePortRange * -DestinationAddressPrefix * -DestinationPortRange 22
            }

            $nsg | Set-AzNetworkSecurityGroup
          azPSVersion: "latest"
          
      - name: "Upload to website"
        uses: garygrossgarten/github-action-scp@release
        with:
          local: ./website/
          remote: /opt/bitnami/apps/navxdocs/htdocs
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}

      - name: "Remove public IP from allowed IPs"
        uses: azure/powershell@v1
        with:
          inlineScript:
            $publicIp = (Get-AzPublicIpAddress | Where-Object {$_.IpAddress -eq ${{ secrets.HOST }} }
            $nsg = Get-AzResource -Resourceid (Get-AzNetworkInterface | Where-Object {$_.IpConfigurations.PublicIpAddress.Id -eq $publicIp.Id }).NetworkSecurityGroup.Id | Get-AzNetworkSecurityGroup

            $ruleExists = (Get-AzNetworkSecurityRuleConfig -NetworkSecurityGroup $nsg).Name.Contains("github")
            if ($ruleExists) {
              Remove-AzNetworkSecurityRuleConfig -Name "github" -NetworkSecurityGroup $nsg
              $nsg | Set-AzNetworkSecurityGroup
            }
          azPSVersion: "latest"