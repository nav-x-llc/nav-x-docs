name: Deploy

on:
  push:
    branches:
      - master

jobs:
  deploy:
    name: "Deploy Website"
    runs-on: windows-latest
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v2.4.0

      - name: "Install NuGet"
        uses: NuGet/setup-nuget@v1.0.5

      - name: "Install DocFX"
        run: |
          if (Test-Path "C:\DocFx\" -PathType Container) {
            Remove-Item C:\DocFX\*.* -Recurse -Force
          }
          nuget install docfx.console -OutputDirectory C:\DocFX -NoCache -NonInteractive

      - name: "Build English Website"
        run: |
          cd en
          $docfxpath = (Get-ChildItem C:\DocFX\ -Filter docfx.exe -Recurse).FullName
          Start-Process -FilePath $docfxpath -ArgumentList build -WorkingDirectory (Get-Location) -NoNewWindow -Wait

      - name: "Assemble website"
        run: |
          if (!(Test-Path "./website/")) {
              New-Item -Path "./website/" -ItemType Directory -Force
          }
          Remove-Item -Path "./website/*" -Recurse
          New-Item -Path "./website/en" -ItemType Directory -Force
          Copy-Item -Path "./_site/images" -Destination "./website" -Recurse
          Copy-Item -Path "./BingSiteAuth.xml" -Destination "./website"
          Copy-Item -Path "./_site/search-stopwords.json" -Destination "./website"
          Copy-Item -Path "./_site/sitemap.xml" -Destination "./website"
          Copy-Item -Path "./_site/*" -Destination "./website/en" -Recurse

      - name: "Get Public IP"
        id: ip
        uses: haythem/public-ip@v1.2

      - name: "Login to Azure"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CRED }}
          enable-AzPSSession: true

      - name: "Add public IP to allowed IPs"
        uses: azure/powershell@v1
        with:
          inlineScript:
            $publicIp = (Get-AzPublicIpAddress | Where-Object {$_.IpAddress -eq ${{ secrets.HOST }} }
            $nsg = Get-AzResource -Resourceid (Get-AzNetworkInterface | Where-Object {$_.IpConfigurations.PublicIpAddress.Id -eq $publicIp.Id }).NetworkSecurityGroup.Id | Get-AzNetworkSecurityGroup

            $ruleExists = (Get-AzNetworkSecurityRuleConfig -NetworkSecurityGroup $nsg).Name.Contains("github")

            if ($ruleExists) {
                Set-AzNetworkSecurityRuleConfig -Name "github" -Description "github" -Access Allow -Protocol TCP -Direction Inbound -Priority 1 -SourceAddressPrefix ${{ steps.ip.outputs.ipv4 }} -SourcePortRange * -DestinationAddressPrefix * -DestinationPortRange 22 -NetworkSecurityGroup $nsg
            }
            else {
                $nsg | Add-AzNetworkSecurityRuleConfig -Name "github" -Description "github" -Access Allow -Protocol TCP -Direction Inbound -Priority 1 -SourceAddressPrefix ${{ steps.ip.outputs.ipv4 }} -SourcePortRange * -DestinationAddressPrefix * -DestinationPortRange 22
            }

            $nsg | Set-AzNetworkSecurityGroup
          azPSVersion: "latest"

      - name: "Upload to website"
        uses: garygrossgarten/github-action-scp@release
        with:
          local: website
          remote: /opt/bitnami/apps/navxdocs/htdocs
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}

      - name: "Remove public IP from allowed IPs"
        uses: azure/powershell@v1
        with:
          inlineScript:
            $publicIp = (Get-AzPublicIpAddress | Where-Object {$_.IpAddress -eq ${{ secrets.HOST }} }
            $nsg = Get-AzResource -Resourceid (Get-AzNetworkInterface | Where-Object {$_.IpConfigurations.PublicIpAddress.Id -eq $publicIp.Id }).NetworkSecurityGroup.Id | Get-AzNetworkSecurityGroup

            $ruleExists = (Get-AzNetworkSecurityRuleConfig -NetworkSecurityGroup $nsg).Name.Contains("github")
            if ($ruleExists) {
              Remove-AzNetworkSecurityRuleConfig -Name "github" -NetworkSecurityGroup $nsg
              $nsg | Set-AzNetworkSecurityGroup
            }
          azPSVersion: "latest"